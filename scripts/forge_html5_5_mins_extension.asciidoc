HTML5 app on OpenShift Enterprise with testing and CI
=====================================================

Prerequisites
-------------

* forge_html5_5_mins.asciidoc completed
* openshift enterprise up and running
* An application named `test` created with the MySQL embedded cartridge added
* Your SSH passphrase available as the environment variable `SSH_PASSPHRASE`
* `arquillian` plugin installed in Forge


Deploy to OpenShift 
-------------------

This section takes the app you created and pushes it to the cloud. Now the app is publically available!

1. Create the application in the OpenShift Explorer.
2. Work through the wizard, pointing at the existing local project. Maven sure to choose an _ext cartridge to have it publically available
3. Edit the pom.xml, and add maven.repository.redhat.com
4. Do a publish on the server adaptor, it will push it
5. Check it's working. Visit `https://<appname>-<domain>.rhcloud.com/` to check it's working


Add MySQL to app
----------------

This section switches the in memory H2 datasource for a MySQL database. Once complete, you won't loose data between restarts of the app. We use OpenShift's built in MySQL support, configured via the web console.

1. First, add the MySQL _embedded cartridge_ to our app. Right click on application in OpenShift explorer, and choose "Edit Embedded Cartridges"
2. Choose MySQL. .
4. OpenShift automatically configures a managed datasource for this database, so we don't need to do anything here. 
5. Now, we need to tell the app to use the MySQL datasource. In JBDS copy `src/main/resources` to `src/main/resources-openshift`, open up `src/main/resources-openshift/persistence.xml` and set the DS to `java:jboss/datasources/MysqlDS` and change the `hibernate.hbm2ddl.auto` property to `update`, so that we don't clobber the data every time!
6. Now, edit the `pom.xml` and tell Maven to use the `resources-openshift` on openshift. Add this to the `openshift` profile:
+
[source,xml]
------------------------------------------------------------------------------------
   <resources>
     <resource>
       <directory>src/main/resources-openshift</directory>
     </resource>
   </resources>
------------------------------------------------------------------------------------
6. Now publish the changes from the server adaptor
7. Visit the app, and add an entry


Testing 
-----------------

Now let's add some testing to our app. 

1. First, Add Arquillian to your app. It doesn't really matter what container you select, at the moment Forge doesn't support the OpenShift container, we need to add it manually.

    arquillian setup --containerType REMOTE --containerName ... 

1. Now, we better actually add a test! We'll be exercising the JAX-RS endpoint we created.
+
./src/test/java/com/acme/test/MemberTest.java
[source,java]
------------------------------------------------------------------------
@RunWith(Arquillian.class)
public class AttendeeTest {

    @Deployment
    public static WebArchive deployment() {
	return ShrinkWrap
	        .create(WebArchive.class)
	        .addClasses(Attendee.class, AttendeeEndpoint.class)
	        .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml")
	        .addAsResource("META-INF/persistence.xml",
	                "META-INF/persistence.xml");
    }

    @Inject
    AttendeeEndpoint endpoint;

    @Test
    public void testMember() {
	Attendee attendee = new Attendee();
	attendee.setName("Vineet Reynolds");

	endpoint.create(attendee);

	List<Attendee> members = endpoint.listAll();
	Assert.assertTrue(checkBobInList(members));
    }

    private boolean checkBobInList(List<Attendee> attendees) {
	for (Attendee a : attendees) {
	    if (a.getName().equals("Vineet Reynolds"))
		return true;
	}
	return false;
    }

}
------------------------------------------------------------------------

4. Now, enable the remote maven profile in JBDS and run the JUnit test.

